/*
 * Copyright (c) 2016 Qiscus.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.qiscus.sdk.chat.domain.common

import java.util.regex.Pattern

/**
 * Commonly used regular expression patterns.
 */
object Patterns {

    /**
     * Regular expression to match all IANA top-level domains.
     *
     *
     * List accurate as of 2015/11/24.  List taken from:
     * http://data.iana.org/TLD/tlds-alpha-by-domain.txt
     * This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py
     */
    private val IANA_TOP_LEVEL_DOMAINS = "(?:com|net|org|biz|id|co.id)"

    private val IP_ADDRESS = Pattern.compile(
            "((25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(25[0-5]|2[0-4]"
                    + "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]"
                    + "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"
                    + "|[1-9][0-9]|[0-9]))")

    /**
     * Valid UCS characters defined in RFC 3987. Excludes space characters.
     */
    private val UCS_CHAR = "[" +
            "\u00A0-\uD7FF" +
            "\uF900-\uFDCF" +
            "\uFDF0-\uFFEF" +
            "\uD800\uDC00-\uD83F\uDFFD" +
            "\uD840\uDC00-\uD87F\uDFFD" +
            "\uD880\uDC00-\uD8BF\uDFFD" +
            "\uD8C0\uDC00-\uD8FF\uDFFD" +
            "\uD900\uDC00-\uD93F\uDFFD" +
            "\uD940\uDC00-\uD97F\uDFFD" +
            "\uD980\uDC00-\uD9BF\uDFFD" +
            "\uD9C0\uDC00-\uD9FF\uDFFD" +
            "\uDA00\uDC00-\uDA3F\uDFFD" +
            "\uDA40\uDC00-\uDA7F\uDFFD" +
            "\uDA80\uDC00-\uDABF\uDFFD" +
            "\uDAC0\uDC00-\uDAFF\uDFFD" +
            "\uDB00\uDC00-\uDB3F\uDFFD" +
            "\uDB44\uDC00-\uDB7F\uDFFD" +
            "&&[^\u00A0[\u2000-\u200A]\u2028\u2029\u202F\u3000]]"

    /**
     * Valid characters for IRI label defined in RFC 3987.
     */
    private val LABEL_CHAR = "a-zA-Z0-9" + UCS_CHAR

    /**
     * RFC 1035 Section 2.3.4 limits the labels to a maximum 63 octets.
     */
    private val IRI_LABEL = "[$LABEL_CHAR](?:[$LABEL_CHAR\\-]{0,61}[$LABEL_CHAR]){0,1}"

    private val PROTOCOL = "(?i:http|https|rtsp):\\/\\/"

    /* A word boundary or end of input.  This is to stop foo.sure from matching as foo.su */
    private val WORD_BOUNDARY = "(?:\\b|$|^)"

    private val USER_INFO = "(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)" +
            "\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_" +
            "\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@"

    private val PORT_NUMBER = "\\:\\d{1,5}"

    private val PATH_AND_QUERY = "\\/(?:(?:[$LABEL_CHAR\\;\\/\\?\\:\\@\\&\\=\\#\\~\\-\\.\\+\\!\\*\\" +
            "'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*"

    /**
     * Regular expression that matches known TLDs and punycode TLDs
     */
    private val STRICT_TLD = IANA_TOP_LEVEL_DOMAINS

    /**
     * Regular expression that matches host names using [.STRICT_TLD]
     */
    private val STRICT_HOST_NAME = "(?:(?:$IRI_LABEL\\.)+$STRICT_TLD)"

    /**
     * Regular expression that matches domain names using either [.STRICT_HOST_NAME] or
     * [.IP_ADDRESS]
     */
    private val STRICT_DOMAIN_NAME = Pattern.compile("(?:$STRICT_HOST_NAME|$IP_ADDRESS)")

    /**
     * Regular expression that matches domain names without a TLD
     */
    private val RELAXED_DOMAIN_NAME = "(?:(?:$IRI_LABEL(?:\\.(?=\\S))?)+|$IP_ADDRESS)"

    /**
     * Regular expression to match strings that do not start with a supported protocol. The TLDs
     * are expected to be one of the known TLDs.
     */
    private val WEB_URL_WITHOUT_PROTOCOL = "(" + WORD_BOUNDARY + "(?<!:\\/\\/)" +
            "(" + "(?:" + STRICT_DOMAIN_NAME + ")" + "(?:" + PORT_NUMBER + ")?" + ")" +
            "(?:" + PATH_AND_QUERY + ")?" + WORD_BOUNDARY + ")"

    /**
     * Regular expression to match strings that start with a supported protocol. Rules for domain
     * names and TLDs are more relaxed. TLDs are optional.
     */
    private val WEB_URL_WITH_PROTOCOL = "(" + WORD_BOUNDARY + "(?:" + "(?:" + PROTOCOL + "(?:" + USER_INFO + ")?" + ")" +
            "(?:" + RELAXED_DOMAIN_NAME + ")?" + "(?:" + PORT_NUMBER + ")?" + ")" +
            "(?:" + PATH_AND_QUERY + ")?" + WORD_BOUNDARY + ")"

    /**
     * Regular expression pattern to match IRIs. If a string starts with http(s):// the expression
     * tries to match the URL structure with a relaxed rule for TLDs. If the string does not start
     * with http(s):// the TLDs are expected to be one of the known TLDs.
     */
    val AUTOLINK_WEB_URL: Pattern = Pattern.compile("($WEB_URL_WITH_PROTOCOL|$WEB_URL_WITHOUT_PROTOCOL)")

}